#include <stdio.h>
#include<math.h>
#include <time.h>
#include <quadmath.h>
#include <stdlib.h>

int FCOUNT;  

void kinetik_enerji(double r[3],double v[3], double *E)  {
    double mu= 2.9619474286664206E-04;
    double v2 = v[0]*v[0] + v[1]*v[1] + v[2]*v[2];
    double r2 = r[0]*r[0] + r[1]*r[1] + r[2]*r[2];
    double norm_r=sqrt(r2);
    double ek = 0.5*v2;         // kinetic energy 
    double epot = -mu/norm_r;    // potential energy
          *E = ek + epot;       // mechanical energy                           
    } 


// equation of motion's right-hand side evaluation as function:
void f(double r[3], double v[3], double *r_i, double *v_i)  {
     double mu= 2.9619474286664206E-04;
    double dot = r[0]*r[0]+ r[1]*r[1]+ r[2]*r[2];
    double r3=dot*sqrt(dot); 

        for(int i=0; i<3; i++)                {
         v_i[i] = -r[i]*mu/r3; 
         r_i[i] = v[i];                       }               
                                              }    

 // 4th Order Runge Kutta Method with double-precision:
void RK4(double r[3], double v[3], double dt) {
    double k_r1[3], k_v1[3], k_r2[3], k_v2[3];
    double k_r3[3], k_v3[3], k_r4[3], k_v4[3];
    double v_temp1[3], v_temp2[3], v_temp3[3];
    double r_temp1[3], r_temp2[3], r_temp3[3];
    double kr[3], kv[3];

    f(r, v, k_r1, k_v1);
        for(int i=0; i<3; i++)               {
            v_temp1[i]= v[i]+k_v1[i]*0.5*dt;
            r_temp1[i]= r[i]+k_r1[i]*0.5*dt; 
                                             }

    f(r_temp1, v_temp1, k_r2, k_v2);
        for(int i=0; i<3; i++)               {
            v_temp2[i]= v[i]+k_v2[i]*0.5*dt;
            r_temp2[i]= r[i]+k_r2[i]*0.5*dt;
                                             }

    f(r_temp2, v_temp2, k_r3, k_v3);
        for(int i=0; i<3; i++)               {
            v_temp3[i]= v[i]+k_v3[i]*dt;
            r_temp3[i]= r[i]+k_r3[i]*dt;    
                                             }

    f(r_temp3, v_temp3, k_r4, k_v4);

        for(int i=0; i<3; i++)               {
           kv[i] = (k_v1[i] +2*(k_v2[i]+k_v3[i])+ k_v4[i])/6.0;
           kr[i] = (k_r1[i] +2*(k_r2[i]+k_r3[i])+ k_r4[i])/6.0;
           v[i] += kv[i]*dt;
           r[i] += kr[i]*dt;                 }
    }  

int main() {

     double T, t, dt, energy;
     double r[]= {6.931720357474623E+08, -2.745889195466235E+08, -1.436878793848155E+07}; // position
     double v[]= {4.653807892682983E+00, 1.276054417367929E+01, -1.571074085212407E-01}; // velocity
     double E= 92.25704912411518333633168582252779905q;                      // mechanical energy of system 

      char buf1[128], buf2[128];
      quadmath_snprintf (buf1, sizeof buf1, "%*.32Qf", 20, E);

    T=  4500;      // toplam zaman                          
    dt= 0.01;              // zaman degisim
    t = 0.0;              // baslangic ani

    double time_spent = 0.0; 
    clock_t begin = clock(); 
    int Count=0.0;

    FILE *kk, *pp, *tt;
     kk = fopen("RK4_maya_double_pos.txt","w");
     pp = fopen("RK4_maya_double_vel.txt","w");
     tt = fopen("RK4_maya_double_hata2.txt","w");
    while ( t <= T )  {          // ( t <= tmax/dt )
       RK4(r, v, dt);     
       kinetik_enerji(r, v, &energy);   

       __float128 energy_1= fabsq(E-energy)/E;
       quadmath_snprintf (buf2, sizeof buf2, "%*.33Qf", 10, energy_1);

     fprintf(tt,"%.3lf %s \n", t, buf2);
     fprintf(kk, "%.3lf %.16lf %.16lf %.16lf\n", t, r[0], r[1], r[2]);
     fprintf(pp, "%.3lf %.16lf %.16lf %.16lf\n", t, v[0], v[1], v[2]);
       t += dt;   
       Count++;      
              }

    clock_t end = clock();   
    fclose(kk);
    fclose(pp);
    fclose(tt);

    time_spent += (double)(end - begin) / CLOCKS_PER_SEC; 
    printf("The elapsed time is %f seconds \n", time_spent);

    return 0; 
     }

     // java -jar topcat-full.jar -> topcat
     // gcc  -o double.exe double.c -lm -lquadmath -> compiling and linking
     // ./double -> exe
     // CPU time = 0.156000 s.
